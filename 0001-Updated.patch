From 2a6fa56184d695497a4deba1a6deb0705d9ce8f5 Mon Sep 17 00:00:00 2001
From: Harshit Dhundale <harshitdhundale@gmail.com>
Date: Thu, 11 Jul 2024 11:59:45 +0530
Subject: [PATCH] Updated

---
 src/App.tsx   | 29 ++++++++++++++++++++++++++---
 src/Graph.tsx |  7 ++++++-
 2 files changed, 32 insertions(+), 4 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..756a7c2 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,8 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      // showGraph is a boolean state that determines if the Graph react element should be rendered.
+      showGraph: false,
     };
   }
 
@@ -29,7 +32,9 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
@@ -39,8 +44,26 @@ class App extends Component<{}, IState> {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+
+      // The new data from the server is stored in serverResponds
+      // We use the spread operator to spread the data in the state and the new data from the server
+      // into a new array and update the state with this new array
+
+      let x = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds: ServerRespond[]) => {
+          this.setState({
+            data: serverResponds,
+            showGraph: true,
+          });
+        });
+        x++;
+        if (x > 1000) {
+          clearInterval(interval);
+        }
+      }, 100);
+    }
+    );
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..f8d3a4e 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -49,6 +49,11 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}')
     }
   }
 
-- 
2.45.0.windows.1

